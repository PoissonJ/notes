Code - Makefile - Referencse

Top part, copy past into header file

Implementing multivalued first is preferred as the other are specific cases

A semaphore is a # that is synchronized and shared between processes
2 operations on semaphores:
 * P (take, or down) - take (s) { while (s <= 0) //wait  then s--
 * V (get, or up) - Add 1 to semaphore

Project1b with a semaphore

S = 1 // Both processes have this
for (------) {
    // Blocks until it can take one off of S
    take(s)
    -----------
    give(S)
}

Semaphore needed: Database with 10 connections
We have a pool of processes that have sharred semaphores
Start with S=10
When one enters it takes from S, then gives back to S
Need to be aware of Resources and deadlock. If R is empty and the queue for S
is full, the processes will be stuck waiting

All 4 need to by system calls :(, even if they may be wrappers around get and
set sv which they probably wont be. Just need to include unistd.h to include
them, like project 1. Should include descriptions of the functions and how we
implemented them. Probably going to use a patch again

Tips:
How are we going to implement a semaphore in the OS? The idea is that when you
call take you are put in a queue.
We have semaphore S and queue Q
Call take and S is 0, added to Q
Q { A, B, C }
When one of the elements calls give, take one element from the queue if FIFO order.
If there is nothing in the queue, we need to increment S

How do we mannage the creation of S and Q though?
For the queue do not use a linked list! Need fixed sized bounded arrays
Lets say you define S as semaphore S[100] we can have up to 20 processes (Q[100][20])
blocked waiting on it
create returns index + 1
If a process dies and does not call delete semaphore, we need to delete it as
semaphores are a finite resource. Therefore need a structure that keeps track
of which which process has access to semaphores

parent process {
    S = create_sem()
    // fork some number of times to create children that have access to the semaphores

}

We can now implrmenet create, delete, up and down but the exec will be the problem.



Project 2 Hints
Refer to Project #1 for adding system calls to PM. You can add either 4 new
system calls (create,up,down,close) or you can multiplex those operations
through 1/2 system calls.  For passing arguments for your system calls
(semaphore descriptors), refer to your Project #1 implementation and how you
passed the child's PID for promote. (e.g., message m; m.m1_i1 = 1;) An
important part of semaphore down/up is blocking/waking threads on resource
contention. (waitpid does something similar in forkexit.c) Blocking processes:
You can simply return a special value (SUSPEND) which indicates to PM that it
should not respond to the calling process's system call yet.  Waking processes:
Use the setreply function in PM (main.c) to signal a wakeup to a process. The
first parameter of this method indicates what process to wake. The second
parameter is the return value of the system call for that process.  Many
processes can be blocked on a single semaphore, thus these processes must be
stored in a queue (FIFO) in order to wake them later. In particular, you want
to store the process's index, -not- its PID.  Inheritance of semaphores must be
performed whenever a child process is forked. The fork code can be found in
PM's forkexit.c in do_fork().  Releasing unclosed semaphores must also be
handled for a process when it dies/exits. This can be found in two areas,
forkexit.c for clean exits and signal.c for signals that will kill a process
(signal.c modifications aren't necessary, the kill code is forwarded back to
forkexit.c.).  Tip: When developing the project, it is easy to test semaphores
if one process performs: sem_down, scanf(...) /*wait for user input*/, sem_up.
The other process can simply do: sem_down, printf(...), sem_up. This allows for
controlled access of semaphores for functionality verification.
