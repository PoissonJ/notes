# List of what was changed

## Building the system call

1) Add `int shared_value` to /usr/src/servers/pm/mproc.h struct definition
2) Change /usr/src/servers/pm/forkexit.c both function do_fork and do_srv_fork
   to set initial value to 0
3) In /usr/src/include/minix/callnr.h set new define statements for get and set
   shared value
4) Add system call function prototype in /usr/src/servers/pm/proto.h
5) Implement system calls in /usr/src/servers/pm as a c file. The system calls
   use the mp pointer to change or retrieve the current process' shared value.
   Shared Value is passed from the later implemented user call using messaging.
6) Add new c files to makefile for compilation
7) Run make services && make install && reboot in /usr/src/releasetools

## Building the user call

1) Create function prototype in /usr/src/include/unistd.h (including parameters!)
2) Implement functions while passing the parameters to the system call through
   the messaging in /usr/src/lib/libc/sys-minix/... The functions will set the
   status of the status pointer based on the success of the system call and
   then return the shared value. These functions are responsible for calling the
   implemented system calls.
3) Add functions to list in SRCS in /usr/src/lib/libc/sys-minix/Makefile.inc
4) Run `cd /usr/src && make build && reboot`


## Testing/Test program
Create function that uses the user library call and the value of status after
the calls. The status will tell the user if the call was successful. The call
could have failed if either the shared value was returned as 0 (unchanged), or
the current process was not found (== null). Set_sv should basically never fail
because the system call sets the shared_val to the shared_val cooresponding to
the calling process' ID.

## Man Page

1) In /usr/src/man/man2 create new entries for get_sv.2 and set_sv.2
2) After completing man pages explaining what the library function does, add the
   two new files to the directories Makefile
3) In /usr/src/man run `make && make install && reboot`

## Known bugs
There could be error if the user wants to set the current process' shared value
to 0. This is because the user call will return a FAILURE status if the shared
value is 0 as this is the default shared value. The call assumes that the user
inputted shared value is not equal to 0.

Also, when setting sharred value to negative numbers, the test programs crash


Note:
The system call will return the shared value, then user level call can change the
value of the status depending on if the value of the shared value is correct
