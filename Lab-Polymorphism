Lab-Polymorphism

                                     * * *

#Polymorphism
{{{cpp
Class Polygon {
   Private:
      Vector<Point*> vert;
      int size();
   Public:
      void setVert (int i, float x, float y);
      Polygon (Vector Vert, int size);  //Constructor
}}}
</br>

## Extension of Polygon
{{{cpp
Class Triangle:Public Polygon {
   Public:
      Triangle(Vector vert): Polygon (Vert);
}
}}}

## Main
{{{cpp
int main() {
   // Init Vert
   Triangle t (vert, size=3);
   Polygon p* = &t;
   p->setVert(0, 1, 1);
}
}}}

   >So far this has only been inheritance because it is possible to have an
   >instance of Polygon
</br>

### To achieve Polymorphism the keyword ‘Virtual’ must be used
#### Example
{{{
virtual float area() = 0;  // '=0' is used to prevent an instance of Polygon
// If one method of the class is completly virtual in this fashion, the class
// can not be instantiated
}}}
</br>

### Because of Polymorphism, this code works for another method of the Polygon
### class
{{{cpp int compare (Polygon* p) {
   if (this->area() > p->area()) {
      return 1;
   }
}
}}}
> This does not need to be virtual because area is already completely virtual.
> This method is more using inheritance than polymorphism.

